/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/hjXZ1ssiHCk
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/

'use client';

import { useState, useEffect } from 'react';
import { Button } from "@/components/ui/button";
import { Card, CardHeader, CardTitle, CardContent, CardDescription } from "@/components/ui/card";
import { ArrowUpIcon, MoveHorizontalIcon, IconGemini, SearchIcon, UsersIcon } from "@/components/ui/icons";
import { Avatar, AvatarImage, AvatarFallback } from "@/components/ui/avatar";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Textarea } from "@/components/ui/textarea";
import SimpleBANComponent from '@/components/ui/SimpleBANComponent';
import { GPPieChart } from '@/components/chart/GPPieChart';
import GPDotLineChart from '@/components/chart/GPDotLineChart';
import GPMultBarChart from '@/components/chart/GPMultBarChart';
import GPStackedBarChart from '@/components/chart/GPStackedBarChart';
import { generateRandomChartData } from '@/components/utils/generateRandomData';
import Spinner from '@/components/ui/spinner';
import MapCard from '@/components/ui/BasicMap';
import { provinceCoordinates } from '@/components/data/provinceCoordinates';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuCheckboxItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu"
import { kalimantanProvinces, kalimantanKabupaten, years } from '@/components/data/kalimantanData';
import { kalimantanIndicators, getIndicators } from "../data/kalimantanIndicators";
import ReactMarkdown from 'react-markdown';
import remarkGfm from 'remark-gfm';
import Header from '@/components/ui/Header';

const chartTypes = ['line', 'treemap', 'bar', 'pie']; // Add 'area' chart type

const generateRandomCharts = () => {
  const numCharts = Math.floor(Math.random() * 6) + 3; // 3 to 8 charts
  const charts = [];
  for (let i = 0; i < numCharts; i++) {
    const chartData = generateRandomChartData();
    // console.log('Chart Data :', chartData);
    const chartType = chartTypes[Math.floor(Math.random() * chartTypes.length)];
    charts.push({ ...chartData, type: chartType });
  }
  return charts;
};

export default function Dash() {

  const [input, setInput] = useState('');
  const [messages, setMessages] = useState([
    {
      speaker: 'AI',
      text: 'Welcome to Geoplan AI! I am here to assist you with data analysis and visualization. Feel free to ask me anything or request specific charts and insights. Let\'s get started!'
    }
  ]);
  const [isTyping, setIsTyping] = useState(false);
  const [charts, setCharts] = useState([]);
  const [selectedProvince, setSelectedProvince] = useState("Kalimantan Timur");
  const [selectedKabupaten, setSelectedKabupaten] = useState("Kutai Kartanegara");
  const [selectedYear, setSelectedYear] = useState("2022");
  const [gdpGrowth, setGdpGrowth] = useState("5.13%");
  const [unemploymentRate, setUnemploymentRate] = useState("4.05%");
  const [inflationRate, setInflationRate] = useState("5.36%");
  const [economicData, setEconomicData] = useState([]);
  const [mapCenter, setMapCenter] = useState([117.9213, -1.9993]);
  const [mapZoom, setMapZoom] = useState(4);

  const handleChartRequest = async () => {
    if (input.trim() !== '') {
      const newMessages = [...messages, { speaker: 'User', text: input }];
      setMessages(newMessages);
      setInput('');
      setIsTyping(true);

      try {
        // Call generate-json API first
        const jsonResponse = await fetch('/api/generate-json', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ prompt: input }),
        });

        const jsonData = await jsonResponse.json();

        if (!jsonResponse.ok) {
          throw new Error(jsonData.message || 'Something went wrong with generate-json API');
        }

        const { Province, Kabupaten, Year } = jsonData;

        // Update filter values based on generate-json output
        setSelectedProvince(Province);
        setSelectedKabupaten(Kabupaten);
        setSelectedYear(Year);

        // Update map center and zoom
        if (provinceCoordinates[Province]) {
          setMapCenter(provinceCoordinates[Province]);
          setMapZoom(5);
        }

        // Call chat-response API using the input question
        const textResponse = await fetch('/api/chat-response', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ question: input }),
        });

        const textData = await textResponse.json();

        if (!textResponse.ok) {
          throw new Error(textData.message || 'Something went wrong with chat-response API');
        }

        // Fetch economic data
        let fetchedEconomicData = [];
        try {
          console.log('Get econ data');
          const economicDataResponse = await fetch('/api/get-economic-data', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({ province: Province, kabupaten: Kabupaten }),
          });

          if (economicDataResponse.ok) {
            fetchedEconomicData = await economicDataResponse.json();
            console.log('Economic Data:', fetchedEconomicData);

            // Transform the economic data to the required format
            const formattedEconomicData = fetchedEconomicData.length > 0 ? [
              { month: 'jan', visitors: fetchedEconomicData[0].pred_2023, fill: "hsl(var(--chart-2))" },
              { month: 'feb', visitors: fetchedEconomicData[0].pred_2024, fill: "hsl(var(--chart-2))" },
              { month: 'mar', visitors: fetchedEconomicData[0].pred_2025, fill: "hsl(var(--chart-1))" },
              { month: 'apr', visitors: fetchedEconomicData[0].pred_2026, fill: "hsl(var(--chart-1))" },
              { month: 'may', visitors: fetchedEconomicData[0].pred_2027, fill: "hsl(var(--chart-1))" },
              { month: 'jun', visitors: fetchedEconomicData[0].pred_2028, fill: "hsl(var(--chart-1))" }
            ] : [];
            setEconomicData(formattedEconomicData);
            console.log('Econ data : ', formattedEconomicData);
          } else {
            console.error('Failed to fetch economic data:', economicDataResponse.statusText);
            setEconomicData([]);
          }
        } catch (error) {
          console.error('Error querying economic data:', error);
          setEconomicData([]);
        }

        const newCharts = generateRandomCharts();
        setCharts(newCharts);
        setMessages([...newMessages, { speaker: 'AI', text: textData.summary }]);
      } catch (error) {
        console.error('Error generating response:', error);
        setMessages([...newMessages, { speaker: 'AI', text: 'There was an error generating the response.' }]);
      }

      setIsTyping(false);
    }
  };

  const handleKeyDown = (event) => {
    if (event.key === 'Enter' && !event.shiftKey) {
      event.preventDefault();
      handleChartRequest();
    }
  };

  const handleProvinceChange = (province) => {
    setSelectedProvince(province);
    setSelectedKabupaten(kalimantanKabupaten[province][0]);
    setMapCenter(provinceCoordinates[province]);
    setMapZoom(5);
  };

  const handleKabupatenChange = (kabupaten) => {
    setSelectedKabupaten(kabupaten);
  };

  const handleYearChange = (year) => {
    setSelectedYear(year);
  };

  // useEffect(() => {
  //   const initialCharts = generateRandomCharts(); // Generate initial set of random charts
  //   setCharts(initialCharts);
  // }, []);

  useEffect(() => {
    const fetchData = () => {
      const data = getIndicators(selectedProvince, selectedKabupaten, selectedYear);
      if (data) {
        setGdpGrowth(data.gdpGrowth);
        setUnemploymentRate(data.unemploymentRate);
        setInflationRate(data.inflationRate);
      }
    };

    fetchData();
  }, [selectedProvince, selectedKabupaten, selectedYear]);

  return (
    <div className="flex flex-col h-screen">
      <Header />
      <div className="flex flex-1 overflow-hidden">
        <div className="flex-1 overflow-auto p-6 scrollbar-hidden">
          <div className="flex gap-6 mb-6">
            <div className="flex-shrink-0">
              <DropdownMenu>
                <DropdownMenuTrigger className="px-4 py-2 border border-gray-300 rounded-md shadow-sm bg-gray-100">
                  {selectedProvince}
                </DropdownMenuTrigger>
                <DropdownMenuContent>
                  <DropdownMenuLabel>Provinsi</DropdownMenuLabel>
                  <DropdownMenuSeparator />
                  {kalimantanProvinces.map((province) => (
                    <DropdownMenuCheckboxItem
                      key={province}
                      checked={selectedProvince === province}
                      onCheckedChange={() => handleProvinceChange(province)}
                    >
                      {province}
                    </DropdownMenuCheckboxItem>
                  ))}
                </DropdownMenuContent>
              </DropdownMenu>
            </div>
            <div className="flex-shrink-0">
              <DropdownMenu>
                <DropdownMenuTrigger className="px-4 py-2 border border-gray-300 rounded-md shadow-sm bg-gray-100">
                  {selectedKabupaten}
                </DropdownMenuTrigger>
                <DropdownMenuContent>
                  <DropdownMenuLabel>Kabupaten</DropdownMenuLabel>
                  <DropdownMenuSeparator />
                  {kalimantanKabupaten[selectedProvince].map((kabupaten) => (
                    <DropdownMenuCheckboxItem
                      key={kabupaten}
                      checked={selectedKabupaten === kabupaten}
                      onCheckedChange={() => handleKabupatenChange(kabupaten)}
                    >
                      {kabupaten}
                    </DropdownMenuCheckboxItem>
                  ))}
                </DropdownMenuContent>
              </DropdownMenu>
            </div>
            <div className="flex-shrink-0">
              <DropdownMenu>
                <DropdownMenuTrigger className="px-4 py-2 border border-gray-300 rounded-md shadow-sm bg-gray-100">
                  {selectedYear}
                </DropdownMenuTrigger>
                <DropdownMenuContent>
                  <DropdownMenuLabel>Tahun</DropdownMenuLabel>
                  <DropdownMenuSeparator />
                  {years.map((year) => (
                    <DropdownMenuCheckboxItem
                      key={year}
                      checked={selectedYear === year}
                      onCheckedChange={() => handleYearChange(year)}
                    >
                      {year}
                    </DropdownMenuCheckboxItem>
                  ))}
                </DropdownMenuContent>
              </DropdownMenu>
            </div>
          </div>
          <div className="grid grid-cols-3 gap-6 mb-6">
            <SimpleBANComponent title="GDP Growth" value={gdpGrowth} improvement="0.2% from last year" />
            <SimpleBANComponent title="Unemployment Rate" value={unemploymentRate} improvement="-2.17% from last year" />
            <SimpleBANComponent title="Inflation Rate" value={inflationRate} improvement="0.1% from last year" />
          </div>
          <div className="grid grid-cols-2 gap-6 mb-6">
            <MapCard center={mapCenter} zoom={mapZoom} />
            <GPDotLineChart data={economicData} />
          </div>
          {/* <div className="grid grid-cols-3 gap-6">
            <GPDotLineChart />
            <GPPieChart key={`pie-69`} />
            <GPMultBarChart />
            <GPStackedBarChart
              title="Simpanan"
              description="Monthly Savings Data"
            />
            <GPStackedBarChart
              title="Pinjaman"
              description="Monthly Loan Data"
            />
            {charts.map((chart, index) => {
              switch (chart.type) {
                case 'treemap':
                  return <SimpleAreaChart key={`treemap-${index}`} />;
                case 'bar':
                  return <SimpleBarChart key={`bar-${index}`} />;
                case 'pie':
                  return <GPPieChart key={`pie-${index}`} />;
                case 'area': // Add case for area chart
                  return <SimpleAreaChart key={`area-${index}`} />;
                default:
                  return <GPNegativeChart key={`default-${index}`} />;
              }
            })}
          </div> */}
        </div>
        <div className="bg-gray-100 dark:bg-gray-800 p-2 w-1/3 flex flex-col h-screen sticky top-0">
          <Card className="h-full flex flex-col">
            <CardContent className="p-0 h-full flex flex-col">
              <div className="flex items-center justify-between px-4 py-3 border-b border-gray-200 dark:border-gray-700">
                <div className="flex items-center gap-2">
                  <Avatar className="w-6 h-6 border">
                    <AvatarImage src="/gemini.png" />
                    <AvatarFallback>Geoplan AI</AvatarFallback>
                  </Avatar>
                  <div className="font-medium">Geoplan AI</div>
                </div>
                <div className="flex items-center gap-2">
                  <Button variant="ghost" size="icon" className="rounded-full">
                    <SearchIcon className="w-4 h-4" />
                  </Button>
                  <Button variant="ghost" size="icon" className="rounded-full">
                    <MoveHorizontalIcon className="w-4 h-4" />
                  </Button>
                </div>
              </div>
              <ScrollArea className="flex-1 overflow-auto pb-16 scrollbar-hidden">
                <div className="p-4 space-y-4">
                  {messages.map((message, index) => (
                    <div key={index} className="flex items-start gap-4">
                      <Avatar className="w-6 h-6 border">
                        {message.speaker === 'AI' ? (
                          <AvatarImage src="/gemini.png" />
                        ) : (
                          <AvatarImage src="/placeholder-user.jpg" />
                        )}
                        <AvatarFallback>
                          <UsersIcon className="w-4 h-4" />
                        </AvatarFallback>
                      </Avatar>
                      <div className="grid gap-1 items-start">
                        <div>
                          <ReactMarkdown remarkPlugins={[remarkGfm]}>{message.text}</ReactMarkdown>
                        </div>
                      </div>
                    </div>
                  ))}
                  {isTyping && (
                    <div className="flex items-start gap-4">
                      <Avatar className="w-6 h-6 border">
                        <AvatarImage src="/gemini.png" />
                        <AvatarFallback>
                          <UsersIcon className="w-4 h-4" />
                        </AvatarFallback>
                      </Avatar>
                      <div className="grid gap-1 items-start">
                        <Spinner />
                      </div>
                    </div>
                  )}
                </div>
              </ScrollArea>
              <div className="sticky bottom-0 left-0 right-0 p-4 bg-transparent">
                <div className="relative">
                  <Textarea
                    placeholder="Ask me anything..."
                    value={input}
                    onChange={(e) => setInput(e.target.value)}
                    onKeyDown={handleKeyDown}
                    className="h-12 rounded-2xl resize-none p-4 border border-gray-200 shadow-sm pr-16 bg-gray-100 focus:outline-none focus:ring-0" // Removed border-neutral-400 and added focus:outline-none
                  />
                  <Button
                    type="button"
                    size="icon"
                    className="absolute top-3 right-3 w-8 h-8"
                    onClick={handleChartRequest}
                  >
                    <ArrowUpIcon className="w-4 h-4" />
                  </Button>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  );
}
